{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["niceColors","require","Plane","props","usePlane","rotation","Math","PI","position","ref","receiveShadow","castShadow","args","color","Cubes","useBox","mass","random","api","colors","useMemo","array","Float32Array","n","THREE","i","set","floor","convertSRGBToLinear","toArray","useFrame","at","attachObject","attach","vertexColors","Spheres","useSphere","App","useState","placementMode","setPlacementMode","fallback","Html","shadows","placementCameraOffset","Vector3","intensity","id","role","onKeyPress","currentPlacementMode","tabIndex","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.565c64a2.chunk.js","sourcesContent":["\n\nimport * as THREE from 'three';\nimport React, { useState, useMemo, Suspense } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport {\n Physics, usePlane, useBox, useSphere,\n} from '@react-three/cannon';\nimport { ZapparCamera, InstantTracker, ZapparCanvas } from '@zappar/zappar-react-three-fiber';\n\nimport { Html } from '@react-three/drei';\nimport { Vector3 } from 'three';\n\nconst niceColors = require('nice-color-palettes');\n\nfunction Plane(props: any) {\n  const [ref] = usePlane(() => ({ rotation: [-Math.PI / 2, 0, 0], position: [0, -1, 0], ...props }));\n  return (\n    <mesh ref={ref} receiveShadow castShadow>\n      <planeBufferGeometry args={[3, 3]} />\n      <meshStandardMaterial color=\"lightblue\" />\n    </mesh>\n  );\n}\n\nfunction Cubes() {\n  const n = 50;\n  const [ref, api] = useBox(() => ({\n    mass: 1,\n    args: [0.1, 0.1, 0.1],\n    position: [Math.random() - 0.5, Math.random() * 1, Math.random() - 0.5],\n  }));\n\n  const colors = useMemo(() => {\n    const array = new Float32Array(n * 3);\n    const color = new THREE.Color();\n    for (let i = 0; i < n; i += 1) {\n color\n        .set(niceColors[8][Math.floor(Math.random() * 5)])\n        .convertSRGBToLinear()\n        .toArray(array, i * 3);\n}\n    return array;\n  }, [n]);\n\n  useFrame(() => api.at(Math.floor(Math.random() * n)).position.set(0, Math.random() * 2, 0));\n\n  return (\n    // https://github.com/pmndrs/react-three-fiber/issues/720 null, null BUG\n    <instancedMesh receiveShadow castShadow ref={ref} args={[null as any, null as any, n]}>\n      <boxBufferGeometry args={[0.1, 0.1, 0.1]}>\n        <instancedBufferAttribute attachObject={['attributes', 'color']} args={[colors, 3]} />\n      </boxBufferGeometry>\n      <meshLambertMaterial attach=\"material\" vertexColors />\n    </instancedMesh>\n  );\n}\n\nfunction Spheres() {\n  const n = 50;\n  const [ref, api] = useSphere(() => ({\n    mass: 1,\n    args: 0.1,\n    position: [Math.random() - 0.5, Math.random() * 1, Math.random() - 0.5],\n  }));\n\n  const colors = useMemo(() => {\n    const array = new Float32Array(n * 3);\n    const color = new THREE.Color();\n    for (let i = 0; i < n; i += 1) {\n color\n        .set(niceColors[8][Math.floor(Math.random() * 5)])\n        .convertSRGBToLinear()\n        .toArray(array, i * 3);\n}\n    return array;\n  }, [n]);\n\n  useFrame(() => api.at(Math.floor(Math.random() * n)).position.set(0, Math.random() * 2, 0));\n\n  return (\n    // https://github.com/pmndrs/react-three-fiber/issues/720 null, null BUG\n    <instancedMesh receiveShadow castShadow ref={ref} args={[null as any, null as any, n]}>\n      <sphereBufferGeometry args={[0.1, 0.1, 0.1]}>\n        <instancedBufferAttribute attachObject={['attributes', 'color']} args={[colors, 3]} />\n      </sphereBufferGeometry>\n      <meshLambertMaterial attach=\"material\" vertexColors />\n    </instancedMesh>\n  );\n}\n\nfunction App() {\n    // Set up states\n    const [placementMode, setPlacementMode] = useState(true);\n    return (\n      <>\n      <Suspense fallback={<Html>Loading...</Html>}>\n        <ZapparCanvas shadows>\n\n          <ZapparCamera />\n          <InstantTracker\n          placementCameraOffset={new Vector3(0,0, -10)}\n          placementMode={placementMode}\n          >\n\n            <Physics>\n              <Plane />\n              <Cubes />\n              <Spheres />\n            </Physics>\n\n          </InstantTracker>\n          <ambientLight intensity={0.6} />\n          <directionalLight position={[0, 8, 5]} intensity={0.5} castShadow />\n        </ZapparCanvas>\n        </Suspense>\n      <div\n        id=\"zappar-button\"\n        role=\"button\"\n        onKeyPress={() => { setPlacementMode(((currentPlacementMode) => !currentPlacementMode)); }}\n        tabIndex={0}\n        onClick={() => { setPlacementMode(((currentPlacementMode) => !currentPlacementMode)); }}\n      >\n        Tap here to\n        {placementMode ? ' place ' : ' pick up '}\n        the object\n      </div>\n      </>\n    );\n}\n\nexport default App;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}